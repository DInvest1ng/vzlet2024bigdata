from aiogram import F, Router, types
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
import keyboards as kb
import airesponce
import aiofiles
import os
from aiogram.fsm.state import State, StatesGroup

router = Router()

@router.message(F.chat.type == 'private', CommandStart())
async def cmd_start(message: Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç! –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–µ–º –æ–±—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å—Ä–∞–∑—É –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ä–∞–±–æ—Ç–µ? –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É –∏–∑ –æ–±—É—á–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ:\n\n/help', reply_markup=kb.ob_or_next)

@router.message(F.chat.type == 'private', F.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚è©')
async def nnn(message: Message):
    await message.answer("–ß–µ–º –∑–∞–π–º–µ–º—Å—è?", reply_markup=kb.Next)

@router.message(F.chat.type == 'private', F.text == '–û–±—É—á–µ–Ω–∏–µ üìö')
async def nnn(message: Message):
    await message.answer('–û–±—É—á–µ–Ω–∏–µ:\n\
\n–ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –¥–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å:', reply_markup=kb.education)

@router.message(F.chat.type == 'private', F.text == '‚è™ –ù–∞–∑–∞–¥')
async def nnn(message: Message):
    await message.answer(f'–ü–æ–≤—Ç–æ—Ä–∏–º –æ–±—É—á–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º', reply_markup=kb.ob_or_next)

@router.message(F.chat.type == 'private', F.text == '–ö–∞–∫ –º–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–º? ‚ùì')
async def nnn(message: Message):
    await message.answer(f'–ß—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ—Å–∫–∞–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–º–∞–Ω–¥—É /summary –≤ –≥—Ä—É–ø–ø—É –≥–¥–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –±–æ—Ç', reply_markup=kb.backinstruct)

@router.message(F.chat.type == 'private', F.text == '–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç ü§ñ')
async def nnn(message: Message):
    await message.answer(f'–ù–∞–π—Ç–∏ –±–æ—Ç–∞ –ø–æ –Ω–∏–∫—É @SlashInatorBot –ø–µ—Ä–µ–π—Ç–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É', reply_markup=kb.backinstruct)

@router.message(F.chat.type == 'private', F.text == '–ë–µ–∑–æ–ø–∞—Å—Ç–Ω–æ –ª–∏ —ç—Ç–æ üîí')
async def nnn(message: Message):
    await message.answer(f'–î–∞, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞—é—Ç—Å—è –∏ –ø–µ—Ä–µ–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑, —Ç–∞–º –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤–∞–º –∫–∞–∫ –æ—Ç–≤–µ—Ç, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ–Ω–∏ —É–¥–∞–ª—è—é—Ç—Å—è - –¥–∞–Ω–Ω—ã–µ —É –Ω–∞—Å –Ω–µ —Ö—Ä–∞–Ω—è—Ç—Å—è', reply_markup=kb.backinstruct)

@router.message(F.chat.type == 'private', F.text == '–ü–µ—Ä–µ—Å–∫–∞–∑ üó£Ô∏è')
async def nnn(message: Message):
    await message.answer(f'–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –ø–æ–∫–∞ —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–º–∞–Ω–¥–æ–π /summary –≤ —á–∞—Ç–µ', reply_markup=kb.backsummary)

@router.message(F.chat.type == 'private', F.text == '–ì–° –≤ —Ç–µ–∫—Å—Ç üìù')
async def nnn(message: Message):
    await message.answer(f'–ü—Ä–∏—à–ª–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', reply_markup=kb.backsummary)

@router.message(F.chat.type == 'private', F.text == '–ù–∞–∑–∞–¥ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É üì±')
async def nnn(message: Message):
    await message.answer("–ß–µ–º –∑–∞–π–º–µ–º—Å—è?", reply_markup=kb.Next)

@router.message(F.chat.type == 'private', F.text == '–ù–∞–∑–∞–¥ –∫ –æ–±—É—á–µ–Ω–∏—é üìö')
async def nnn(message: Message):
    await message.answer('–û–±—É—á–µ–Ω–∏–µ:\n\
\n–ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –¥–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å:', reply_markup=kb.education)

@router.message(F.chat.type == 'private', F.voice)
async def voice_processing(message: types.Message, bot):
    file_id = message.voice.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    destination = f"voice_messages/voice{message.chat.id}.ogg"
    file_content = await bot.download_file(file_path)
    async with aiofiles.open(destination, 'wb') as f:
        await f.write(file_content.getvalue())

    # speech2text
    text = airesponce.speach2text(f"voice_messages/voice{message.chat.id}.ogg")
    os.remove(f"voice_messages/voice{message.chat.id}.ogg")
    await message.answer(text, reply_markup=kb.backvoice)